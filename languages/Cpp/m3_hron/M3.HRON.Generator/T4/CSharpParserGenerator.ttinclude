<#@ include file="Header.ttinclude" #>

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming

<#
    
    var defaultState = model
        .FirstOrDefault (ps => ps.IsDefault) ?? new ParserState ("<DefaultState>", isDefault:true);
#>

namespace M3.HRON.Generator.Parser
{
    using M3.HRON.Generator.Source.Common;

    enum ParserState
    {
<#
    foreach (var parserState in model)
    {
#>
        <#=parserState.Name#>,
<#
    }
#>
    }

    enum ParserStateTransition
    {
<#
    foreach (var parserState in model)
    {
        foreach (var name in parserState.AllStates(defaultState).SelectMany (nps => nps.Names))
        {
#>
            From_<#=parserState.Name#>__To_<#=name#>,
<#
        }
    }
#>
    }

    enum ParserStateChoice
    {
<#
    foreach (var parserState in model)
    {
        foreach (var nextParserState in parserState.ChoiceStates(defaultState))
        {
#>
            From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#>,
<#
        }
    }
#>
    }

    enum ParserResult
    {
        Error   ,
        Continue,
    }


    sealed partial class Scanner
    {
        ParserState State = default (ParserState);
        const char EndOfStream = (char)0;

        partial void Partial_BeginLine (SubString ss);
        partial void Partial_EndLine ();

        partial void Partial_StateChoice (
            char                    current     ,
            ParserStateChoice       choice      ,
            ParserState             from        ,
            ref ParserState         to
            );

        partial void Partial_StateTransition (
            char                    current     ,
            ParserState             from        ,
            ParserState             to          ,
            ParserStateTransition   transition  ,
            ref ParserResult        result      
            );

        partial void Partial_AcceptEndOfStream ();
                
        public ParserResult AcceptEndOfStream ()
        {
            Partial_AcceptEndOfStream ();
            return ParserResult.Continue;             
        }

        public ParserResult AcceptLine (SubString ss)
        {
            var result = ParserResult.Continue;

            Partial_BeginLine (ss);

            var bs = ss.BaseString;
            var begin = ss.Begin;
            var end = ss.End;
            char ch;

            for (var iter = begin; iter < end; ++iter)
            {
                ch = bs[iter];
apply:
                if (result != ParserResult.Continue)
                {
                    return result;
                }

                switch (State)
                {
<#
    foreach (var parserState in model)
    {
#>
                case ParserState.<#=parserState.Name#>:
                    switch (ch)
                    {
<#
    foreach (var nextParserState in parserState.NextStates (defaultState))
    {
        if (nextParserState.IsDefaultCase)
        {
#>
                    default:
<#
        }
        else
        {
            foreach (var ch in nextParserState.Characters)
            {
#>
                    case <#=GetCase(ch)#>:
<#
            }
        }
        if (nextParserState.IsChoice)
        {
#>
                        Partial_StateChoice (
                            ch,
                            ParserStateChoice.From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#>,
                            ParserState.<#=parserState.Name#>,
                            ref State
                            );

                        switch (State)
                        {
<#
        foreach (var name in nextParserState.Names)
        {
#>
                        case ParserState.<#=name#>:
                            Partial_StateTransition (
                                ch,
                                ParserState.<#=parserState.Name#>,
                                State,
                                ParserStateTransition.From_<#=parserState.Name#>__To_<#=name#>,
                                ref result
                                );
                            break;
<#
        }
#>
                        default:
                            result = ParserResult.Error;
                            break;
                    }
<#
        }
        else
        {
            var name = nextParserState.Names[0]; 
#>
                        State = ParserState.<#=name#>; 
                        Partial_StateTransition (
                            ch,
                            ParserState.<#=parserState.Name#>,
                            ParserState.<#=name#>,
                            ParserStateTransition.From_<#=parserState.Name#>__To_<#=name#>,
                            ref result
                            );
<#
        }
    if (nextParserState.HandOver)
    {
#>
                        goto apply;
<#
    }
#>
                        break;
<#
    }
#>    
                    }
                    break;
<#
    }
#>
                default:
                    result = ParserResult.Error;
                    break;
                }
            }

            if (result != ParserResult.Continue)
            {
                return result;
            }

            // EndOfLine
            {
                switch (State)
                {
<#
    foreach (var parserState in model.Where (ps => ps.Any (nps => nps.IsTerminator)))
    {
#>
                case ParserState.<#=parserState.Name#>:
<#
        var nextParserState = parserState.First (nps => nps.IsTerminator);
        if (nextParserState.IsChoice)
        {
#>
                    Partial_StateChoice (
                        EndOfStream,
                        ParserStateChoice.From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#>,
                        ParserState.<#=parserState.Name#>,
                        ref State
                        );

                    switch (State)
                    {
<#
        foreach (var name in nextParserState.Names)
        {
#>
                    case ParserState.<#=name#>:
                        Partial_StateTransition (
                            EndOfStream,
                            ParserState.<#=parserState.Name#>,
                            State,
                            ParserStateTransition.From_<#=parserState.Name#>__To_<#=name#>,
                            ref result
                            );
                        break;
<#
        }
#>
                        default:
                            result = ParserResult.Error;
                            break;
                    }
<#
        }
        else
        {
            var name = nextParserState.Names[0]; 
#>
                    State = ParserState.<#=name#>; 
                    Partial_StateTransition (
                        EndOfStream,
                        ParserState.<#=parserState.Name#>,
                        ParserState.<#=name#>,
                        ParserStateTransition.From_<#=parserState.Name#>__To_<#=name#>,
                        ref result
                        );

<#
        }
#>
                    break;
<#
    }
#>
                }
            }

            Partial_EndLine ();

            return result;
        }
    }
}

<#@ include file="ParserGenerator.ttinclude"#>